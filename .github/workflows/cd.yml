name: CD

on:
  workflow_dispatch:
  push:
    tags:
      - v*

permissions:
  contents: write

jobs:
  functional-latest:
    uses: ./.github/workflows/functional-tests.yml
    with:
      worker_version: latest
      api_version: latest

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: functional-latest
    outputs:
      release_id: ${{ steps.gh-release.outputs.id }}
    steps:
      - name: Checkout release tag
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b
        with:
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Set up Python
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d
        with:
          python-version: '3.x'

      - name: Install build dependency
        run: python3 -m pip install --upgrade pip build twine

      - name: Build binary wheel and source tarball
        run: python3 -m build --sdist --wheel --outdir dist/ .

      - name: Check distribution's long description rendering on PyPI
        run: twine check dist/*

      - id: gh-release
        name: Publish GitHub release candidate
        uses: softprops/action-gh-release@69320dbe05506a9a39fc8ae11030b214ec2d1f87
        with:
          name: ${{ github.ref_name }}-rc
          tag_name: ${{ github.ref }}
          body: "Release waiting for review..."
          files: dist/*

      - name: Store build artifacts
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808
        # NOTE: The GitHub release page contains the release artifacts too, but using
        # GitHub upload/download actions seems robuster: there is no need to compute
        # download URLs and tampering with artifacts between jobs is more limited.
        with:
          name: build-artifacts
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    environment: release
    permissions:
      contents: write  # to update GitHub releases
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Fetch build artifacts
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e
        with:
          name: build-artifacts
          path: dist

      - name: Finalize GitHub release
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: '${{ needs.build.outputs.release_id }}',
              name: '${{ github.ref_name }}',
            })

      - name: Publish distribution ðŸ“¦ to Test PyPI
        env:
          name: testpypi
          url: https://pypi.org/p/repository-service-tuf
        if: github.repository == 'repository-service-tuf/repository-service-tuf-cli'
        uses: pypa/gh-action-pypi-publish@81e9d935c883d0b210363ab89cf05f3894778450
        with:
          repository-url: https://test.pypi.org/legacy/

      - name: Publish binary wheel and source tarball ðŸ“¦ on PyPI
        env:
          name: pypi
          url: https://pypi.org/p/repository-service-tuf
        # Only attempt PyPI upload in upstream repository
        if: github.repository == 'repository-service-tuf/repository-service-tuf-cli'
        uses: pypa/gh-action-pypi-publish@81e9d935c883d0b210363ab89cf05f3894778450
